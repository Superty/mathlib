/-
Copyright (c) 2022 Yury Kudryashov. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Yury Kudryashov
-/
import analysis.complex.abs_max

/-!
-/

open set filter asymptotics complex
open_locale topological_space filter real

namespace phragmen_lindelof

variables {Œπ E F : Type*} [normed_group E] [normed_space ‚ÑÇ E]
  [normed_group F] [normed_space ‚ÑÇ F]

lemma aux {s : set E} {f : E ‚Üí F} (hfd : diff_cont_on_cl ‚ÑÇ f s) {g : Œπ ‚Üí E ‚Üí ‚ÑÇ} {l : filter Œπ}
  [ne_bot l] (hgd : ‚àÄ·∂† i in l, diff_cont_on_cl ‚ÑÇ (g i) s)
  (h‚ÇÅ : ‚àÄ x ‚àà s, tendsto (Œª i, g i x) l (ùìù 1)) (h‚ÇÅ' : ‚àÄ i (x ‚àà frontier s), ‚à•g i x‚à• = 1)
  (h‚ÇÄ : tendsto (Œª p : Œπ √ó E, g p.1 p.2 ‚Ä¢ f p.2) (l √ó·∂† comap norm at_top ‚äì ùìü s) (ùìù 0))
  {C : ‚Ñù} (hC : ‚àÄ x ‚àà frontier s, ‚à•f x‚à• ‚â§ C) {x : E} (hx : x ‚àà closure s) :
  ‚à•f x‚à• ‚â§ C :=
begin
  rw [closure_eq_self_union_frontier, union_comm, mem_union_eq] at hx,
  cases hx, { exact hC x hx },
  cases lt_or_le C 0 with hC‚ÇÄ hC‚ÇÄ,
  { have : frontier s = ‚àÖ,
      from eq_empty_iff_forall_not_mem.2 (Œª y hy, (hC y hy).not_lt (hC‚ÇÄ.trans_le (norm_nonneg _))),
    rcases frontier_eq_empty_iff.mp this with rfl|rfl, { exact false.elim hx },
    simp at *,
 },
  suffices : ‚àÄ·∂† i in l, ‚à•g i x ‚Ä¢ f x‚à• ‚â§ C,
  { refine le_of_tendsto _ this,
    simpa using ((h‚ÇÅ x hx).smul (tendsto_const_nhds : tendsto (Œª _, f x) l _)).norm },
  obtain ‚ü®R, hR‚ÇÄ, hR‚ü© : ‚àÉ R, ‚à•x‚à• < R ‚àß
    ‚àÄ·∂† i in l, ‚àÄ y, ‚à•y‚à• = R ‚Üí y ‚àà closure s ‚Üí ‚à•g i x ‚Ä¢ f x‚à• ‚â§ C,
  {  },
end


lemma horizontal_strip {a b C : ‚Ñù} {f : ‚ÑÇ ‚Üí E}
  (hd : diff_cont_on_cl ‚ÑÇ f (complex.im ‚Åª¬π' Ioo a b))
  (hB : ‚àÉ (c ‚àà Ioo 0 (œÄ / (b - a))) A, ‚àÄ z : ‚ÑÇ, z.im ‚àà Ioo a b ‚Üí
    ‚à•f z‚à• ‚â§ real.exp (A * real.exp (c * |z.re|)))
  (hle : ‚àÄ z : ‚ÑÇ, (z.im = a ‚à® z.im = b) ‚Üí ‚à•f z‚à• ‚â§ C) {z : ‚ÑÇ} (hz : z.im ‚àà Icc a b) :
  ‚à•f z‚à• ‚â§ C :=
begin
  -- If `z.im = a` or `z.im = b`, then apply `hle`, otherwise `z.im ‚àà Ioo a b`
  rcases eq_endpoints_or_mem_Ioo_of_mem_Icc hz with (hz|hz|hz'),
  { exact hle z (or.inl hz) }, { exact hle z (or.inr hz) }, clear hz, rename hz' hz,
  have hab : a < b, from hz.1.trans hz.2,
  have hc : continuous_on f (complex.im ‚Åª¬π' Icc a b),
  { rw [‚Üê closure_Ioo hab.ne, ‚Üê complex.closure_preimage_im],
    exact hd.continuous_on },
  -- obtain ‚ü®c, hc, R, hzR, hR‚ü© : ‚àÉ (c ‚àà Ioo 0 (œÄ / (b - a))) (R : ‚Ñù), |z.re| < R ‚àß
  rcases hB with ‚ü®c, ‚ü®hc‚ÇÄ, hc‚ü©, A, Hle‚ü©,
  rcases exists_between hc with ‚ü®d, hcd, hd‚ü©,
  set g : ‚Ñù ‚Üí ‚ÑÇ ‚Üí ‚ÑÇ := Œª Œµ w, exp (-Œµ * (exp (d * w) + exp (-d * w))),
  have hg‚ÇÅ : ‚àÄ w, tendsto (Œª Œµ, g Œµ w) (ùìù[>] 0) (ùìù 1),
  { refine Œª w, (continuous.tendsto' _ _ _ _).mono_left nhds_within_le_nhds,
    { exact continuous_exp.comp (is_R_or_C.continuous_of_real.neg.mul continuous_const) },
    { simp only [g], simp only [of_real_zero, neg_zero', zero_mul, exp_zero] } },
  refine le_of_forall_pos_le_add _,
end

end phragmen_lindelof
