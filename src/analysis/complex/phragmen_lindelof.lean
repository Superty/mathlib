/-
Copyright (c) 2022 Yury Kudryashov. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Yury Kudryashov
-/
import analysis.complex.abs_max

/-!
-/

open set filter asymptotics complex metric
open_locale topological_space filter real

local notation `expR` := real.exp

namespace phragmen_lindelof

variables {Œπ E : Type*} [normed_group E] [normed_space ‚ÑÇ E]

lemma horizontal_strip_pi_div_two {C : ‚Ñù} {f : ‚ÑÇ ‚Üí E}
  (hd : diff_cont_on_cl ‚ÑÇ f (im ‚Åª¬π' Ioo (-(œÄ / 2)) (œÄ / 2)))
  (hB : ‚àÉ (c ‚àà Ico 0 (1 : ‚Ñù)) A, ‚àÄ z : ‚ÑÇ, |z.im| < œÄ / 2 ‚Üí ‚à•f z‚à• ‚â§ expR (A * expR (c * |z.re|)))
  (hle : ‚àÄ z : ‚ÑÇ, |z.im| = (œÄ / 2) ‚Üí ‚à•f z‚à• ‚â§ C) {z : ‚ÑÇ} (hz : |z.im| ‚â§ œÄ / 2) :
  ‚à•f z‚à• ‚â§ C :=
begin
  -- WLOG, `0 < C`.
  have hœÄ2 : 0 < œÄ / 2, from div_pos real.pi_pos two_pos,
  have hœÄ : -(œÄ / 2) < œÄ / 2, from neg_lt_self hœÄ2,
  suffices : ‚àÄ C' : ‚Ñù, 0 < C' ‚Üí (‚àÄ w : ‚ÑÇ, |w.im| = (œÄ / 2) ‚Üí ‚à•f w‚à• ‚â§ C') ‚Üí ‚à•f z‚à• ‚â§ C',
  { refine le_of_forall_le_of_dense (Œª C' hC', this C' _ $ Œª w hw, (hle w hw).trans hC'.le),
    refine ((norm_nonneg (f (‚Üë(œÄ / 2) * I))).trans (hle _ _)).trans_lt hC',
    rwa [of_real_mul_im, I_im, mul_one, abs_of_pos] },
  clear_dependent C, intros C hC‚ÇÄ hle,
  -- Choose some `c A : ‚Ñù` satisfying `hB`, then choose `b ‚àà (c, 1)`.
  rcases hB with ‚ü®c, ‚ü®hc‚ÇÄ, hc‚ÇÅ‚ü©, A, Hle‚ü©,
  rcases exists_between hc‚ÇÅ with ‚ü®b, hcb, hb‚ÇÅ‚ü©,
  have hb‚ÇÄ : 0 < b, from hc‚ÇÄ.trans_lt hcb,
  have hbœÄ : 0 < b * (œÄ / 2), from mul_pos hb‚ÇÄ hœÄ2,
  have hbœÄ' : b * (œÄ / 2) < œÄ / 2, from (mul_lt_iff_lt_one_left hœÄ2).2 hb‚ÇÅ,
  /- Put `g Œµ w = exp (-Œµ * (exp (b * w) + exp (-b * w)))`. We're only interested in `Œµ > 0`
  and `w` from our strip. -/
  set g : ‚Ñù ‚Üí ‚ÑÇ ‚Üí ‚ÑÇ := Œª Œµ w, exp (-Œµ * (exp (b * w) + exp (-b * w))),
  /- Since `g Œµ z ‚Üí 1` as `Œµ ‚Üí 0`, it suffices to prove that `‚à•g Œµ z ‚Ä¢ f z‚à• ‚â§ C`
  for all positive `Œµ`. -/
  suffices : ‚àÄ·∂† Œµ : ‚Ñù in ùìù[>] 0, ‚à•g Œµ z ‚Ä¢ f z‚à• ‚â§ C,
  { refine le_of_tendsto (tendsto.mono_left _ nhds_within_le_nhds) this,
    refine ((continuous_of_real.neg.mul continuous_const).cexp.smul
      continuous_const).norm.tendsto' _ _ _,
    simp },
  filter_upwards [self_mem_nhds_within] with Œµ Œµ‚ÇÄ, change 0 < Œµ at Œµ‚ÇÄ,
  -- An upper estimate on `‚à•g Œµ w‚à•` that will be used in two branches of the proof.
  obtain ‚ü®Œ¥, Œ¥‚ÇÄ, hŒ¥‚ü© : ‚àÉ Œ¥ : ‚Ñù, 0 < Œ¥ ‚àß ‚àÄ {w : ‚ÑÇ}, |w.im| ‚â§ œÄ / 2 ‚Üí
    abs (g Œµ w) ‚â§ expR (-Œ¥ * expR (b * |w.re|)),
  { have hcos‚ÇÄ : 0 < real.cos (b * (œÄ / 2)),
      from real.cos_pos_of_mem_Ioo (abs_lt.1 $ (abs_of_pos hbœÄ).symm ‚ñ∏ hbœÄ'),
    refine ‚ü®Œµ * real.cos (b * (œÄ / 2)), mul_pos Œµ‚ÇÄ hcos‚ÇÄ, _‚ü©,
    intros w hw,
    calc abs (g Œµ w)
        = expR (-Œµ * (expR (b * w.re) + expR (-b * w.re)) * real.cos (b * w.im)) :
      by simp only [abs_exp, ‚Üê of_real_neg, of_real_mul_re, add_re, exp_re, of_real_mul_im,
        neg_mul b w.im, real.cos_neg, mul_assoc, add_mul]
    ... ‚â§ expR (-(Œµ * real.cos (b * (œÄ / 2))) * expR (b * |w.re|)) : _,
    simp only [real.exp_le_exp, neg_mul, neg_le_neg_iff, mul_assoc, mul_le_mul_left Œµ‚ÇÄ],
    rw mul_comm,
    have hexp : expR (b * |w.re|) ‚â§ expR (b * w.re) + expR (-(b * w.re)),
    { cases le_total w.re 0 with hw hw,
      { rw [abs_of_nonpos hw, mul_neg],
        exact le_add_of_nonneg_left (real.exp_pos _).le },
      { rw [_root_.abs_of_nonneg hw],
        exact le_add_of_nonneg_right (real.exp_pos _).le } },
    have hcos : real.cos (b * (œÄ / 2)) ‚â§ real.cos (b * w.im),
    { rw [‚Üê real.cos_abs (b * w.im)],
      refine real.cos_le_cos_of_nonneg_of_le_pi (_root_.abs_nonneg _) _ _,
      { exact hbœÄ'.le.trans (half_le_self real.pi_pos.le) },
      { rw [_root_.abs_mul, abs_of_pos hb‚ÇÄ],
        exact mul_le_mul_of_nonneg_left hw hb‚ÇÄ.le } },
    exact mul_le_mul hexp hcos hcos‚ÇÄ.le ((real.exp_pos _).le.trans hexp) },
  -- `abs (g Œµ w) ‚â§ 1` whenever `Œµ` is nonnegative and `|w.im| = œÄ / 2`
  have hg‚ÇÅ : ‚àÄ (w : ‚ÑÇ), |w.im| = œÄ / 2 ‚Üí abs (g Œµ w) ‚â§ 1,
  { intros w hw,
    refine (hŒ¥ hw.le).trans (real.exp_le_one_iff.2 _),
    exact mul_nonpos_of_nonpos_of_nonneg (neg_nonpos.2 Œ¥‚ÇÄ.le) (real.exp_pos _).le },
  obtain ‚ü®R, hzR, hR‚ü© : ‚àÉ R : ‚Ñù, |z.re| < R ‚àß ‚àÄ w : ‚ÑÇ, |w.re| = R ‚Üí |w.im| < œÄ / 2 ‚Üí
    ‚à•g Œµ w ‚Ä¢ f w‚à• ‚â§ C,
  { refine ((eventually_gt_at_top _).and _).exists,
    suffices : tendsto (Œª R, expR (-Œ¥ * expR (b * R) + A * expR (c * R))) at_top (ùìù 0),
    { refine (this.eventually (ge_mem_nhds hC‚ÇÄ)).mono (Œª R hR w hre him, _),
      calc ‚à•g Œµ w ‚Ä¢ f w‚à• ‚â§ expR (-Œ¥ * expR (b * R) + A * expR (c * R)) : _
      ... ‚â§ C : hR,
      rw [norm_smul, real.exp_add, ‚Üê hre],
      exact mul_le_mul (hŒ¥ him.le) (Hle _ him) (norm_nonneg _) (real.exp_pos _).le },
    refine real.tendsto_exp_at_bot.comp _,
    clear_dependent C z g f,
    obtain ‚ü®c, hc, rfl‚ü© : ‚àÉ c' : ‚Ñù, 0 < c' ‚àß b - c' = c,
      from ‚ü®b - c, sub_pos.2 hcb, sub_sub_cancel _ _‚ü©,
    simp only [sub_mul, real.exp_sub, div_eq_inv_mul, real.exp_add, ‚Üê mul_assoc, ‚Üê add_mul],
    suffices : tendsto (Œª R, -Œ¥ + A * (expR (c * R))‚Åª¬π) at_top (ùìù (-Œ¥ + A * 0)),
    { rw [mul_zero, add_zero] at this,
      exact tendsto.neg_mul_at_top (neg_lt_zero.2 Œ¥‚ÇÄ) this
        (real.tendsto_exp_at_top.comp $ tendsto_const_nhds.mul_at_top hb‚ÇÄ tendsto_id) },
    refine tendsto_const_nhds.add (tendsto_const_nhds.mul _),
    exact tendsto_inv_at_top_zero.comp (real.tendsto_exp_at_top.comp $
      tendsto_const_nhds.mul_at_top hc tendsto_id) },
  have hR‚ÇÄ : 0 < R, from (_root_.abs_nonneg _).trans_lt hzR,
  have hgd : differentiable ‚ÑÇ (g Œµ),
    from (((differentiable_id.const_mul _).cexp.add
      (differentiable_id.const_mul _).cexp).const_mul _).cexp,
  replace hd : diff_cont_on_cl ‚ÑÇ (Œª w, g Œµ w ‚Ä¢ f w) ((Ioo (-R) R) √ó‚ÑÇ Ioo (-(œÄ / 2)) (œÄ / 2)),
    from (hgd.diff_cont_on_cl.smul hd).mono (Œª w hw, hw.2),
  convert norm_le_of_forall_mem_frontier_norm_le
    ((bounded_Ioo _ _).re_prod_im (bounded_Ioo _ _)) hd (Œª w hw, _) _,
  { have hwc := frontier_subset_closure hw,
    rw [frontier_re_prod_im, closure_Ioo (neg_lt_self hR‚ÇÄ).ne, frontier_Ioo hœÄ,
      closure_Ioo hœÄ.ne, frontier_Ioo (neg_lt_self hR‚ÇÄ)] at hw,
    cases eq_or_ne (|w.im|) (œÄ / 2) with him him,
    { rw [closure_re_prod_im, closure_Ioo (neg_lt_self hR‚ÇÄ).ne] at hwc,
      rw [norm_smul, ‚Üê one_mul C],
      exact mul_le_mul (hg‚ÇÅ _ him) (hle _ him) (norm_nonneg _) zero_le_one },
    { replace hw : w ‚àà {-R, R} √ó‚ÑÇ Icc (-(œÄ / 2)) (œÄ / 2),
      { rw [ne.def, abs_eq hœÄ2.le] at him,
        exact hw.resolve_left (Œª h, him (or.symm h.right)) },
      exact hR _ ((abs_eq hR‚ÇÄ.le).2 (or.symm hw.1)) ((abs_le.2 hw.2).lt_of_ne him) } },
  { rw [closure_re_prod_im, closure_Ioo hœÄ.ne, closure_Ioo (neg_lt_self hR‚ÇÄ).ne],
    exact ‚ü®abs_le.1 hzR.le, abs_le.1 hz‚ü© }
end

lemma horizontal_strip {a b C : ‚Ñù} {f : ‚ÑÇ ‚Üí E}
  (hd : diff_cont_on_cl ‚ÑÇ f (im ‚Åª¬π' Ioo a b))
  (hB : ‚àÉ (c ‚àà Ico 0 (œÄ / (b - a))) A, ‚àÄ z : ‚ÑÇ, z.im ‚àà Ioo a b ‚Üí
    ‚à•f z‚à• ‚â§ expR (A * expR (c * |z.re|)))
  (hle : ‚àÄ z : ‚ÑÇ, (z.im = a ‚à® z.im = b) ‚Üí ‚à•f z‚à• ‚â§ C) {z : ‚ÑÇ} (hz : z.im ‚àà Icc a b) :
  ‚à•f z‚à• ‚â§ C :=
begin
  -- If `z.im = a` or `z.im = b`, then apply `hle`, otherwise `z.im ‚àà Ioo a b`
  rcases eq_endpoints_or_mem_Ioo_of_mem_Icc hz with (hz|hz|hz'),
  { exact hle z (or.inl hz) }, { exact hle z (or.inr hz) }, clear hz, rename hz' hz,
  obtain ‚ü®a, b, ha, rfl, rfl‚ü© :
    ‚àÉ a' b' : ‚Ñù, 0 < a' ‚àß a' * -(œÄ / 2) + b' = a ‚àß a' * (œÄ / 2) + b' = b,
  { refine ‚ü®(b - a) / œÄ, (a + b) / 2, div_pos (sub_pos.2 (hz.1.trans hz.2)) real.pi_pos, _, _‚ü©;
      { field_simp [real.pi_pos.ne'], ring } },
  have hlt_iff : ‚àÄ {w : ‚ÑÇ}, |w.im| < œÄ / 2 ‚Üî
    (a * w + I * b : ‚ÑÇ).im ‚àà Ioo (a * -(œÄ / 2) + b) (a * (œÄ / 2) + b),
  { intro w,
    rw [add_im, mul_comm I, of_real_mul_im, of_real_mul_im, I_im, mul_one, add_mem_Ioo_iff_left,
      add_sub_cancel, add_sub_cancel, mem_Ioo, mul_lt_mul_left ha, mul_lt_mul_left ha, abs_lt] },
  have heq_iff : ‚àÄ {w : ‚ÑÇ}, |w.im| = œÄ / 2 ‚Üî
    (a * w + I * b : ‚ÑÇ).im ‚àà ({a * -(œÄ / 2) + b, a * (œÄ / 2) + b} : set ‚Ñù),
  { intro w,
    rw [add_im, mul_comm I, of_real_mul_im, of_real_mul_im, I_im, mul_one, mem_insert_iff,
      mem_singleton_iff, add_left_inj, add_left_inj, mul_right_inj' ha.ne', mul_right_inj' ha.ne',
      abs_eq (div_pos real.pi_pos two_pos).le, or_comm] },
  have hle_iff : ‚àÄ {w : ‚ÑÇ}, |w.im| ‚â§ œÄ / 2 ‚Üî
    (a * w + I * b : ‚ÑÇ).im ‚àà Icc (a * -(œÄ / 2) + b) (a * (œÄ / 2) + b),
  { intro w,
    rw [add_im, mul_comm I, of_real_mul_im, of_real_mul_im, I_im, mul_one, add_mem_Icc_iff_left,
      add_sub_cancel, add_sub_cancel, mem_Icc, mul_le_mul_left ha, mul_le_mul_left ha, abs_le] },
  obtain ‚ü®z, rfl‚ü© : ‚àÉ z' : ‚ÑÇ, ‚Üëa * z' + I * b = z,
  { use (z - I * b) / a,
    rw [mul_div_cancel' _ (of_real_ne_zero.2 ha.ne'), sub_add_cancel] },
  replace hz : |z.im| ‚â§ œÄ / 2, from hle_iff.2 (Ioo_subset_Icc_self hz),
  set g : ‚ÑÇ ‚Üí E := Œª w, f (a * w + I * b),
  change ‚à•g z‚à• ‚â§ C,
  refine horizontal_strip_pi_div_two
    (hd.comp ((differentiable_id.const_mul _).add_const _).diff_cont_on_cl
      (Œª z hz, hlt_iff.1 $ abs_lt.2 hz)) _ (Œª w hw, hle _ (heq_iff.1 hw)) hz,
  rcases hB with ‚ü®c, hc, A, Hle‚ü©,
  rw [add_sub_add_right_eq_sub, mul_neg, sub_neg_eq_add, ‚Üê mul_add, add_halves,
    div_mul_left real.pi_pos.ne'] at hc,
  refine ‚ü®a * c, ‚ü®mul_nonneg ha.le hc.1, _‚ü©, A, Œª w hw, _‚ü©,
  { rw [mem_Ico, lt_div_iff' ha] at hc, exact hc.2 },
  { convert Hle _ (hlt_iff.1 hw) using 4,
    rw [add_re, mul_comm I, of_real_mul_re, of_real_mul_re, I_re, mul_zero, add_zero,
      _root_.abs_mul, abs_of_pos ha, ‚Üê mul_assoc, mul_comm a] }
end

lemma eq_zero_on_horizontal_strip {a b : ‚Ñù} {f : ‚ÑÇ ‚Üí E}
  (hd : diff_cont_on_cl ‚ÑÇ f (im ‚Åª¬π' Ioo a b))
  (hB : ‚àÉ (c ‚àà Ico 0 (œÄ / (b - a))) A, ‚àÄ z : ‚ÑÇ, z.im ‚àà Ioo a b ‚Üí
    ‚à•f z‚à• ‚â§ expR (A * expR (c * |z.re|)))
  (h‚ÇÄ : ‚àÄ z : ‚ÑÇ, (z.im = a ‚à® z.im = b) ‚Üí f z = 0) {z : ‚ÑÇ} (hz : z.im ‚àà Icc a b) :
  f z = 0 :=
norm_le_zero_iff.1 $ horizontal_strip hd hB (Œª z hz, norm_le_zero_iff.2 $ h‚ÇÄ z hz) hz

end phragmen_lindelof
