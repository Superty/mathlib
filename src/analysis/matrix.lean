/-
Copyright (c) 2021 Heather Macbeth. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Heather Macbeth
-/
import analysis.normed_space.basic
import analysis.normed_space.pi_Lp

/-!
# Matrices as a normed space

In this file we provide the following non-instances on matrices, using the elementwise norm:

* `matrix.semi_normed_group`
* `matrix.normed_group`
* `matrix.normed_space`

These are not declared as instances because there are several natural choices for defining the norm
of a matrix.
-/

noncomputable theory

open_locale nnreal

namespace finset
lemma prod_sup_mul_le_mul_sup_of_nonneg {Œπ Œ∫ Œ±} [linear_ordered_semiring Œ±] [order_bot Œ±]
  {a : Œπ ‚Üí Œ±} {b : Œ∫ ‚Üí Œ±} (s : finset Œπ) (t : finset Œ∫)
  (ha : ‚àÄ i ‚àà s, 0 ‚â§ a i) (hb : ‚àÄ i ‚àà t, 0 ‚â§ b i)  :
  (s.product t).sup (Œª p, a p.1 * b p.2) ‚â§ s.sup a * t.sup b :=
finset.sup_le $ Œª i hi,
  let ‚ü®hs, ht‚ü© := finset.mem_product.mp hi in
    mul_le_mul (le_sup hs) (le_sup ht) (hb _ ht) ((ha _ hs).trans $ le_sup hs)

end finset

namespace matrix

variables {R l n m Œ± : Type*} [fintype n] [fintype m] [fintype l]

section semi_normed_group
variables [semi_normed_group Œ±]

/-- Seminormed group instance (using sup norm of sup norm) for matrices over a seminormed ring. Not
declared as an instance because there are several natural choices for defining the norm of a
matrix. -/
protected def semi_normed_group : semi_normed_group (matrix n m Œ±) :=
pi.semi_normed_group

local attribute [instance] matrix.semi_normed_group

lemma norm_le_iff {r : ‚Ñù} (hr : 0 ‚â§ r) {A : matrix n m Œ±} :
  ‚à•A‚à• ‚â§ r ‚Üî ‚àÄ i j, ‚à•A i j‚à• ‚â§ r :=
by simp [pi_norm_le_iff hr]

lemma nnnorm_le_iff {r : ‚Ñù‚â•0} {A : matrix n m Œ±} :
  ‚à•A‚à•‚Çä ‚â§ r ‚Üî ‚àÄ i j, ‚à•A i j‚à•‚Çä ‚â§ r :=
by simp [pi_nnnorm_le_iff]

lemma norm_lt_iff {r : ‚Ñù} (hr : 0 < r) {A : matrix n m Œ±} :
  ‚à•A‚à• < r ‚Üî ‚àÄ i j, ‚à•A i j‚à• < r :=
by simp [pi_norm_lt_iff hr]

lemma nnnorm_lt_iff {r : ‚Ñù‚â•0} (hr : 0 < r) {A : matrix n m Œ±} :
  ‚à•A‚à•‚Çä < r ‚Üî ‚àÄ i j, ‚à•A i j‚à•‚Çä < r :=
by simp [pi_nnnorm_lt_iff hr]

lemma norm_entry_le_entrywise_sup_norm (A : matrix n m Œ±) {i : n} {j : m} :
  ‚à•A i j‚à• ‚â§ ‚à•A‚à• :=
(norm_le_pi_norm (A i) j).trans (norm_le_pi_norm A i)

lemma nnnorm_entry_le_entrywise_sup_nnorm (A : matrix n m Œ±) {i : n} {j : m} :
  ‚à•A i j‚à•‚Çä ‚â§ ‚à•A‚à•‚Çä :=
(nnnorm_le_pi_nnnorm (A i) j).trans (nnnorm_le_pi_nnnorm A i)

end semi_normed_group

/-- Normed group instance (using sup norm of sup norm) for matrices over a normed ring.  Not
declared as an instance because there are several natural choices for defining the norm of a
matrix. -/
protected def normed_group [normed_group Œ±] : normed_group (matrix n m Œ±) :=
pi.normed_group

section normed_space
local attribute [instance] matrix.semi_normed_group

variables [normed_field R] [semi_normed_group Œ±] [normed_space R Œ±]

/-- Normed space instance (using sup norm of sup norm) for matrices over a normed field.  Not
declared as an instance because there are several natural choices for defining the norm of a
matrix. -/
protected def normed_space : normed_space R (matrix n m Œ±) :=
pi.normed_space

end normed_space

section l0_linf

instance l0_linf_semi_normed_group [semi_normed_group Œ±] :
  semi_normed_group (matrix m n Œ±) :=
(by apply_instance : semi_normed_group (m ‚Üí pi_Lp 1 (Œª j : n, Œ±)))

instance l0_linf_normed_group [normed_group Œ±] :
  normed_group (matrix m n Œ±) :=
(by apply_instance : normed_group (m ‚Üí pi_Lp 1 (Œª j : n, Œ±)))

instance l0_linf_normed_space [normed_field R] [semi_normed_group Œ±] [normed_space R Œ±] :
  normed_space R (matrix m n Œ±) :=
(by apply_instance : normed_space R (m ‚Üí pi_Lp 1 (Œª j : n, Œ±)))

open_locale nnreal big_operators

lemma l0_linf_norm_def [semi_normed_group Œ±] (A : matrix m n Œ±) :
  ‚à•A‚à• = ((finset.univ : finset m).sup (Œª i : m, ‚àë j : n, ‚à•A i j‚à•‚Çä) : ‚Ñù‚â•0) :=
begin
  dunfold has_norm.norm,
  simp_rw [pi_Lp.nnnorm_eq, div_one, nnreal.rpow_one],
end

lemma l0_linf_nnnorm_def [semi_normed_group Œ±] (A : matrix m n Œ±) :
  ‚à•A‚à•‚Çä = (finset.univ : finset m).sup (Œª i : m, ‚àë j : n, ‚à•A i j‚à•‚Çä) :=
subtype.ext $ l0_linf_norm_def A

open_locale matrix

lemma nnorm_mul_vec [semi_normed_ring Œ±] (A : matrix l m Œ±) (v : m ‚Üí Œ±) :
  ‚à•matrix.mul_vec A v‚à•‚Çä ‚â§ ‚à•A‚à•‚Çä * ‚à•v‚à•‚Çä :=
begin
  change subtype.mk (coe _) _ ‚â§ _ *  subtype.mk (coe _) _,
  erw [subtype.eta, subtype.eta],
  simp_rw [l0_linf_nnnorm_def, matrix.mul_vec, matrix.dot_product],
  calc finset.univ.sup (Œª b, ‚à•‚àë i, A b i * v i‚à•‚Çä)
    ‚â§ finset.univ.sup (Œª b, ‚àë i, ‚à•A b i‚à•‚Çä * ‚à•v i‚à•‚Çä) :
      finset.sup_mono_fun (Œª i hi, (nnnorm_sum_le _ _).trans $
        finset.sum_le_sum $ Œª j hj, nnnorm_mul_le _ _)
  ... ‚â§ finset.univ.sup (Œª i, ‚àë j, ‚à•A i j‚à•‚Çä * finset.univ.sup (Œª b, ‚à•v b‚à•‚Çä)) :
    finset.sup_mono_fun (Œª i hi,
      finset.sum_le_sum $ Œª j hj,
        mul_le_mul_of_nonneg_left (finset.le_sup hj) (nnreal.coe_nonneg _))
  ... = finset.univ.sup (Œª i, ‚àë j, ‚à•A i j‚à•‚Çä) * finset.univ.sup (Œª b, ‚à•v b‚à•‚Çä) :
    by rw finset_sup_mul,
end

lemma l0_linf_nnnorm_mul [semi_normed_ring Œ±] (A : matrix l m Œ±) (B : matrix m n Œ±) :
  ‚à•A ‚¨ù B‚à•‚Çä ‚â§ ‚à•A‚à•‚Çä * ‚à•B‚à•‚Çä :=
begin
  simp_rw [l0_linf_nnnorm_def, matrix.mul_apply],
  transitivity finset.univ.sup (Œª (i : l), ‚àë (k : n), ‚àë (j : m), ‚à•A i j‚à•‚Çä * ‚à•B j k‚à•‚Çä),
  { refine finset.sup_mono_fun (Œª x hx, finset.sum_le_sum (Œª i hi, _)),
    apply (nnnorm_sum_le _ _).trans (finset.sum_le_sum (Œª j hj, _)),
    exact nnnorm_mul_le _ _ },
  simp_rw [@finset.sum_comm _ m n],
  refine le_trans _ (finset.prod_sup_mul_le_mul_sup_of_nonneg finset.univ finset.univ
    (Œª i hi, nnreal.zero_le_coe) (Œª i hi, nnreal.zero_le_coe)),
  rw finset.sup_product_left,
  refine finset.sup_mono_fun (Œª i hi, _),
  simp_rw [ finset.sum_mul, ‚Üê finset.mul_sum],
  casesI is_empty_or_nonempty m,
  { simp },
  inhabit m,
  refine le_trans _ (finset.le_sup $ finset.mem_univ (_ : m)),
  swap,

  -- transitivity finset.univ.sup (Œª (i : l), ‚àë (x : m), ‚à•A i x‚à•‚Çä * ‚àë (x_1 : n), ‚à•B x x_1‚à•‚Çä),
  -- refine (finset.sup_mul_le_mul_sup_of_nonneg _ _ _).trans _,
  -- transitivity ‚àë (i : n) (a : m), ‚à•A x a‚à•‚Çä * ‚à•B a i‚à•‚Çä,
  -- refine le_trans _ (finset.prod_sup_mul_le_mul_sup_of_nonneg finset.univ finset.univ
  --   (Œª i hi, nnreal.zero_le_coe) (Œª i hi, nnreal.zero_le_coe)),
  -- simp_rw [finset.sum_mul_sum, finset.sup_product_left, finset.sum_product_right],
  -- refine finset.sup_mono_fun (Œª x hx, _),
  -- refine (finset.sum_le_sum (Œª i hi, _)).trans _,
  -- rotate 1,
  -- { exact nnnorm_sum_le _ _ },
  -- transitivity ‚àë (i : n) (a : m), ‚à•A x a‚à•‚Çä * ‚à•B a i‚à•‚Çä,
  -- { refine finset.sum_le_sum (Œª i hi, finset.sum_le_sum (Œª j hj, nnnorm_mul_le _ _)) },
  -- rw finset.sup_add
  -- casesI is_empty_or_nonempty m,
  -- { simp },
  -- inhabit m,
  -- refine le_trans _ (finset.le_sup $ finset.mem_univ (default : m)),
  -- refine (finset.sum_le_sum (Œª i hi, finset.sum_le_sum $ Œª j hj, nnnorm_mul_le _ _)).trans _,
  -- refine le_trans _ (finset.le_sup hx),
  -- apply finset.le_sup
  -- refine (Œª x, ‚àë j : m √ó n, ‚à•A x.1 j.1 * B x.2 j.2‚à•‚Çä),
  -- rotate 1,
  -- refine finset.sum_le_sum (Œª i hi, nnnorm_mul_le _ _),
  -- rw [‚Üêfinset.univ_product_univ, finset.sup_product_left],
  -- refine
  -- refine le_trans _ (nnnorm_mul_le _ _),
  -- refine (finset.sup_mono_fun $ Œª x hx, finset.sum_le_sum $ Œª i hi, _).trans _,
  -- rw finset.sup_mul_le_mul_sup_of_nonneg,
  -- rw [‚Üênnreal.mul_rpow],
  -- simp_rw [matrix.mul_apply],
  -- rw @finset.sum_comm _ n m,
  -- rw [finset.sum_mul_sum, finset.sum_product],
  -- refine nnreal.rpow_le_rpow _ one_half_pos.le,
  -- refine finset.sum_le_sum (Œª i hi, finset.sum_le_sum $ Œª j hj, _),
  -- rw [‚Üê nnreal.rpow_le_rpow_iff one_half_pos, ‚Üê nnreal.rpow_mul,
  --   mul_div_cancel' (1 : ‚Ñù) two_ne_zero, nnreal.rpow_one, nnreal.mul_rpow,
  --     ‚Üêpi_Lp.nnorm_eq, ‚Üêpi_Lp.nnorm_eq],
  -- dsimp,
  -- let a : pi_Lp 2 _ := A i,
  -- let a' : pi_Lp 2 _ := Œª j, star (a j),
  -- let b : pi_Lp 2 _ := Œª k, B k j,
  -- letI : inner_product_space Œ± (pi_Lp 2 (Œª i : m, Œ±)) := pi_Lp.inner_product_space _,
  -- change ‚à•‚àë k, a k * b k‚à•‚Çä ‚â§ ‚à•a‚à•‚Çä * ‚à•b‚à•‚Çä,
  -- convert nnorm_inner_le_nnorm a' b using 2,
  -- { simp,
  --   simp_rw [star_ring_end_apply, star_star], },
  -- simp [pi_Lp.nnorm_eq, a'],
  -- simp_rw [star_ring_end_apply, nnorm_star],
end

-- /-- Matrices are a normed ring wrt the `L1-to-L‚àû` norm. -/
-- def matrix.normed_ring : normed_ring (matrix n n ùïú) :=
-- { norm_mul := sorry,
--   .. matrix.ring,
--   .. matrix.normed_group' ùïú n n }

end l0_linf

end matrix
