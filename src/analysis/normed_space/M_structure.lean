/-
Copyright (c) 2022 Christopher Hoskin. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Christopher Hoskin
-/
import analysis.normed_space.basic

/-!
# M-structure

A continuous projection P on a normed space X is said to be an L-projection if, for all `x` in `X`,
$$
‚à•x‚à• = ‚à•P x‚à• + ‚à•(1-P) x‚à•.
$$
The range of an L-projection is said to be an L-summand of X.

A continuous projection P on a normed space X is said to be an M-projection if, for all `x` in `X`,
$$
‚à•x‚à• = max(‚à•P x‚à•,‚à•(1-P) x‚à•).
$$
The range of an M-projection is said to be an M-summand of X.

The L-projections and M-projections form Boolean algebras. When X is a Banach space, the Boolean
algebra of L-projections is complete.

Let `X` be a normed space with dual `X^*`. A closed subspace `M` of `X` is said to be an M-ideal if
the topological annihilator `M^‚àò` is an L-summand of `X^*`.

M-ideal, M-summands and L-summands were introduced by Alfsen and Effros in [alfseneffros1972] to
study the structure of general Banach spaces. When `A` is a JB*-triple, the M-ideals of `A` are
exactly the norm-closed ideals of `A`. When `A` is a JBW*-triple with predual `X`, the M-summands of
`A` are exactly the weak*-closed ideals, and their pre-duals can be identified with the L-summands
of `X`. In the special case when `A` is a C*-algebra, the M-ideals are exactly the norm-closed
two-sided ideals of `A`, when `A` is also a W*-algebra the M-summands are exactly the weak*-closed
two-sided ideals of `A`.

## Implementation notes

The approach to showing that the L-projections form a Boolean algebra is inspired by
`measure_theory.measurable_space`.

## References

* [Behrends, M-structure and the Banach-Stone Theorem][behrends1979]
* [Harmand, Werner, Werner, M-ideals in Banach spaces and Banach algebras][harmandwernerwerner1993]

## Tags

M-summand, M-projection, L-summand, L-projection, M-ideal, M-structure

-/

variables {M : Type*} [monoid M]

/--
A continuous linear map `P` on a normed space `X` is said to be a projection if it is idempotent.
-/
def is_projection (x : M) : Prop := x^2 = x

lemma projection_def {P : M} (h : is_projection P) : P^2 = P := by exact h

namespace is_projection

lemma mul_of_commute {P Q : M} (h : commute P Q) (h‚ÇÅ : is_projection P) (h‚ÇÇ : is_projection Q) :
  is_projection (P*Q)  :=
begin
  unfold is_projection,
  unfold is_projection at h‚ÇÅ,
  unfold is_projection at h‚ÇÇ,
  unfold commute at h,
  unfold semiconj_by at h,
  rw [sq, mul_assoc, ‚Üê mul_assoc Q, ‚Üêh, mul_assoc P, ‚Üê sq, h‚ÇÇ, ‚Üê mul_assoc, ‚Üê sq, h‚ÇÅ],
end

variables {R : Type*} [ring R]

lemma complement {P: R} (h: is_projection P) : is_projection (1-P) :=
begin
  unfold is_projection,
  unfold is_projection at h,
  rw sq at h,
  rw [sq, mul_sub_left_distrib, mul_one, sub_mul, one_mul, h, sub_self, sub_zero],
end


lemma complement_iff {P: R} : is_projection P ‚Üî is_projection (1-P) :=
‚ü® is_projection.complement ,
begin
  intros h,
  rw ‚Üê sub_sub_cancel 1 P,
  apply is_projection.complement h,
end ‚ü©

instance : has_compl (subtype (is_projection  : R ‚Üí Prop)) :=
‚ü®Œª P, ‚ü®1-P, P.prop.complement‚ü©‚ü©

end is_projection

variables {X : Type*} [normed_group X]

variables {ùïú : Type*} [normed_field ùïú] [normed_space ùïú X]

/--
A projection on a normed space `X` is said to be an L-projection if, for all `x` in `X`,
$$
‚à•x‚à• = ‚à•P x‚à• + ‚à•(1-P) x‚à•.
$$
-/
def is_Lprojection (P : X ‚ÜíL[ùïú] X) : Prop := is_projection P ‚àß ‚àÄ (x : X), ‚à•x‚à• = ‚à•P x‚à• + ‚à•(1-P) x‚à•

/--
A projection on a normed space `X` is said to be an M-projection if, for all `x` in `X`,
$$
‚à•x‚à• = max(‚à•P x‚à•, ‚à•(1-P) x‚à•).
$$
-/
def is_Mprojection (P: X ‚ÜíL[ùïú] X) : Prop :=
  is_projection P ‚àß ‚àÄ (x : X), ‚à•x‚à• = (max ‚à•P x‚à•  ‚à•(1-P) x‚à•)

namespace is_Lprojection

lemma Lcomplement {P: X ‚ÜíL[ùïú] X} (h: is_Lprojection P) :  is_Lprojection (1-P) :=
‚ü®is_projection.complement_iff.mp h.1, Œª x, by { rw [add_comm, sub_sub_cancel], exact h.2 x }‚ü©

lemma Lcomplement_iff (P: X ‚ÜíL[ùïú] X) : is_Lprojection P ‚Üî is_Lprojection (1-P) :=
‚ü®Lcomplement, Œª h, by { rw [‚Üê sub_sub_cancel 1 P], exact Lcomplement h }‚ü©

lemma PQ_eq_QPQ (P Q : X ‚ÜíL[ùïú] X) (h‚ÇÅ: is_Lprojection P) (h‚ÇÇ: is_Lprojection Q) :
  P * Q = Q * P * Q :=
begin
  ext,
  rw ‚Üê norm_sub_eq_zero_iff,
  have e1 : ‚à•Q x‚à• ‚â• ‚à•Q x‚à• + 2 ‚Ä¢ ‚à• (P * Q) x - (Q * P * Q) x‚à• :=
  calc ‚à•Q x‚à• = ‚à•P (Q x)‚à• + ‚à•(1 - P) (Q x)‚à• : by rw h‚ÇÅ.right
  ... = ‚à•Q (P (Q x))‚à• + ‚à•(1-Q) (P (Q x))‚à• + ‚à•(1 - P) (Q x)‚à• : by rw h‚ÇÇ.right
  ... = ‚à•Q (P (Q x))‚à• + ‚à•(1-Q) (P (Q x))‚à• + (‚à•Q ((1 - P) (Q x))‚à• + ‚à•(1-Q) ((1 - P) (Q x))‚à•) :
    by rw h‚ÇÇ.right ((1 - P) (Q x))
  ... = ‚à•Q (P (Q x))‚à• + ‚à•(1-Q) (P (Q x))‚à• + (‚à•Q (Q x - P (Q x))‚à• + ‚à•(1-Q) ((1 - P) (Q x))‚à•) : rfl
  ... = ‚à•Q (P (Q x))‚à• + ‚à•(1-Q) (P (Q x))‚à• + (‚à•Q (Q x) - Q (P (Q x))‚à• + ‚à•(1-Q) ((1 - P) (Q x))‚à•) :
    by rw map_sub
  ... = ‚à•Q (P (Q x))‚à• + ‚à•(1-Q) (P (Q x))‚à• + (‚à•(Q * Q) x - Q (P (Q x))‚à• + ‚à•(1-Q) ((1 - P) (Q x))‚à•) :
    rfl
  ... = ‚à•Q (P (Q x))‚à• + ‚à•(1-Q) (P (Q x))‚à• + (‚à•Q x - Q (P (Q x))‚à• + ‚à•(1-Q) ((1 - P) (Q x))‚à•) :
    by rw [‚Üê sq, projection_def h‚ÇÇ.left]
  ... = ‚à•Q (P (Q x))‚à• + ‚à•(1-Q) (P (Q x))‚à• + (‚à•Q x - Q (P (Q x))‚à• + ‚à•(1-Q) (Q x - P (Q x))‚à•) : rfl
  ... = ‚à•Q (P (Q x))‚à• + ‚à•(1-Q) (P (Q x))‚à• + (‚à•Q x - Q (P (Q x))‚à• + ‚à•(1-Q) (Q x) - (1-Q) (P (Q x))‚à•)
    : by rw map_sub
  ... = ‚à•Q (P (Q x))‚à• + ‚à•(1-Q) (P (Q x))‚à• + (‚à•Q x - Q (P (Q x))‚à•
    + ‚à•((1-Q) * Q) x - (1-Q) (P (Q x))‚à•) : rfl
  ... = ‚à•Q (P (Q x))‚à• + ‚à•(1-Q) (P (Q x))‚à• + (‚à•Q x - Q (P (Q x))‚à• + ‚à•0 - (1-Q) (P (Q x))‚à•) :
    by {rw [sub_mul, ‚Üê sq, projection_def h‚ÇÇ.left, one_mul, sub_self ], exact rfl }
  ... = ‚à•Q (P (Q x))‚à• + ‚à•(1-Q) (P (Q x))‚à• + (‚à•Q x - Q (P (Q x))‚à• + ‚à•(1-Q) (P (Q x))‚à•) :
    by rw [zero_sub, norm_neg]
  ... = ‚à•Q (P (Q x))‚à• + ‚à•Q x - Q (P (Q x))‚à• + 2‚Ä¢‚à•(1-Q) (P (Q x))‚à•  : by abel
  ... ‚â• ‚à•Q x‚à• + 2 ‚Ä¢ ‚à• (P * Q) x - (Q * P * Q) x‚à• :
    by exact add_le_add_right (norm_le_insert' (Q x) (Q (P (Q x)))) (2‚Ä¢‚à•(1-Q) (P (Q x))‚à•),
  rw ge at e1,
  nth_rewrite_rhs 0 ‚Üê add_zero (‚à•Q x‚à•) at e1,
  rw [add_le_add_iff_left, two_smul,  ‚Üê two_mul]  at e1,
  rw le_antisymm_iff,
  refine ‚ü®_, norm_nonneg _‚ü©,
  rwa [‚Üêmul_zero (2:‚Ñù), mul_le_mul_left (show (0:‚Ñù) < 2, by norm_num)] at e1
end

lemma QP_eq_QPQ (P Q : X ‚ÜíL[ùïú] X) (h‚ÇÅ: is_Lprojection P) (h‚ÇÇ: is_Lprojection Q) : Q * P = Q * P * Q
  :=
begin
  have e1: P * (1 - Q) = P * (1 - Q) - (Q * P - Q * P * Q) :=
  calc P * (1 - Q) = (1 - Q) * P * (1 - Q) : by rw PQ_eq_QPQ P (1 - Q) h‚ÇÅ h‚ÇÇ.Lcomplement
  ... = 1 * (P * (1 - Q)) - Q * (P * (1 - Q)) : by {rw mul_assoc, rw sub_mul,}
  ... = P * (1 - Q) - Q * (P * (1 - Q)) : by rw one_mul
  ... = P * (1 - Q) - Q * (P - P * Q) : by rw [mul_sub, mul_one]
  ... = P * (1 - Q) - (Q * P - Q * P * Q) : by rw [mul_sub Q, mul_assoc],
  rwa [eq_sub_iff_add_eq, add_right_eq_self, sub_eq_zero] at e1
end

lemma Lproj_commute {P Q: X ‚ÜíL[ùïú] X} (h‚ÇÅ: is_Lprojection P) (h‚ÇÇ : is_Lprojection Q) : commute P Q :=
begin
  rw [commute, semiconj_by, PQ_eq_QPQ P Q h‚ÇÅ h‚ÇÇ],
  nth_rewrite_rhs 0 QP_eq_QPQ P Q h‚ÇÅ h‚ÇÇ
end

lemma mul {P Q : X ‚ÜíL[ùïú] X} (h‚ÇÅ : is_Lprojection P) (h‚ÇÇ : is_Lprojection Q) :
  is_Lprojection (P*Q) :=
begin
  refine ‚ü®is_projection.mul_of_commute (Lproj_commute h‚ÇÅ h‚ÇÇ) h‚ÇÅ.left h‚ÇÇ.left, _‚ü©,
  intro x,
  refine le_antisymm _ _,
  { calc ‚à• x ‚à• = ‚à•(P * Q) x + (x - (P * Q) x)‚à• : by abel
    ... ‚â§ ‚à•(P * Q) x‚à• + ‚à• x - (P * Q) x ‚à• : by apply norm_add_le
    ... = ‚à•(P * Q) x‚à• + ‚à•(1 - P * Q) x‚à• : rfl },
  { calc ‚à•x‚à• = ‚à•Q x‚à• + ‚à•(1-Q) x‚à• : by rw h‚ÇÇ.right x
    ... = ‚à•P(Q x)‚à• + ‚à•(1-P)(Q x)‚à• + ‚à•(1-Q) x‚à• : by rw h‚ÇÅ.right (Q x)
    ... = ‚à•P(Q x)‚à• + ‚à•Q x - P (Q x)‚à• + ‚à•x - Q x‚à• : rfl
    ... = ‚à•P(Q x)‚à• + (‚à•Q x - P (Q x)‚à• + ‚à•x - Q x‚à•) : by rw add_assoc
    ... ‚â• ‚à•P(Q x)‚à• + ‚à•(Q x - P (Q x)) + (x - Q x)‚à• :
      by apply (add_le_add_iff_left (‚à•P(Q x)‚à•)).mpr (norm_add_le (Q x - P (Q x)) (x - Q x))
    ... = ‚à•P(Q x)‚à• + ‚à•x - P (Q x)‚à• : by rw sub_add_sub_cancel'
    ... = ‚à•(P * Q) x‚à• + ‚à•(1 - P * Q) x‚à• : rfl }
end

lemma join {P Q: X ‚ÜíL[ùïú] X} (h‚ÇÅ : is_Lprojection P) (h‚ÇÇ : is_Lprojection Q) :
  is_Lprojection (P + Q - P * Q) :=
begin
  have e1:  1 - (1 - P) * (1 - Q) = P + Q - P * Q :=
  calc 1 - (1 - P) * (1 - Q) = 1 -(1 - Q - P * (1 - Q)) : by rw [sub_mul, one_mul]
  ... = Q + P * (1 - Q) : by rw [sub_sub, sub_sub_self]
  ... = P + Q - P * Q : by rw [mul_sub, mul_one, add_sub, add_comm],
  rw [‚Üê e1, ‚Üê is_Lprojection.Lcomplement_iff],
  exact is_Lprojection.mul (is_Lprojection.Lcomplement h‚ÇÅ) (is_Lprojection.Lcomplement h‚ÇÇ)
end

instance : has_compl { f : X ‚ÜíL[ùïú] X // is_Lprojection f } :=
‚ü®Œª P, ‚ü®1-P, P.prop.Lcomplement‚ü©‚ü©

@[simp] lemma coe_compl (P : subtype (is_Lprojection  : (X ‚ÜíL[ùïú] X) ‚Üí Prop)) :
  ‚Üë(P·∂ú) = (1:X ‚ÜíL[ùïú] X) - ‚ÜëP := rfl

instance : has_inf {P : X ‚ÜíL[ùïú] X // is_Lprojection P} :=
‚ü®Œª P Q, ‚ü®P * Q, P.prop.mul Q.prop‚ü© ‚ü©

@[simp] lemma coe_inf (P Q : subtype (is_Lprojection  : (X ‚ÜíL[ùïú] X) ‚Üí Prop)) :
  ‚Üë(P ‚äì Q) = ((‚ÜëP : (X ‚ÜíL[ùïú] X)) * ‚ÜëQ) := rfl

instance : has_sup {P : X ‚ÜíL[ùïú] X // is_Lprojection P} :=
‚ü®Œª P Q, ‚ü®P + Q - P * Q, P.prop.join Q.prop‚ü© ‚ü©

@[simp] lemma coe_sup (P Q : subtype (is_Lprojection  : (X ‚ÜíL[ùïú] X) ‚Üí Prop)) :
  ‚Üë(P ‚äî Q) = ((‚ÜëP:X ‚ÜíL[ùïú] X) + ‚ÜëQ - ‚ÜëP * ‚ÜëQ) := rfl

instance : has_sdiff {P : X ‚ÜíL[ùïú] X // is_Lprojection P} :=
‚ü®Œª P Q, ‚ü®P * (1-Q), by exact is_Lprojection.mul P.prop (is_Lprojection.Lcomplement Q.prop) ‚ü©‚ü©

@[simp] lemma coe_sdiff (P Q : subtype (is_Lprojection  : (X ‚ÜíL[ùïú] X) ‚Üí Prop)) :
  ‚Üë(P \ Q) = (‚ÜëP:X ‚ÜíL[ùïú] X) * (1-‚ÜëQ) := rfl

instance : partial_order {P : X ‚ÜíL[ùïú] X // is_Lprojection P} :=
{ le := Œª P Q, (‚ÜëP:X ‚ÜíL[ùïú] X) = ‚Üë(P ‚äì Q),
  le_refl := Œª P,
  begin
    simp only [coe_inf],
    rw [‚Üê sq, projection_def],
    exact P.prop.left,
  end,
  le_trans := Œª P Q R,
  begin
    intros h‚ÇÅ h‚ÇÇ,
    simp only [coe_inf],
    have e‚ÇÅ: ‚ÜëP = ‚ÜëP * ‚ÜëQ := h‚ÇÅ,
    have e‚ÇÇ: ‚ÜëQ = ‚ÜëQ * ‚ÜëR := h‚ÇÇ,
    have e‚ÇÉ: (‚ÜëP:X ‚ÜíL[ùïú] X) = ‚ÜëP * ‚ÜëR :=
    begin
      nth_rewrite_rhs 0 e‚ÇÅ,
      rw [mul_assoc, ‚Üê e‚ÇÇ, ‚Üê e‚ÇÅ],
    end,
    apply e‚ÇÉ,
  end,
  le_antisymm := Œª P Q,
  begin
    intros h‚ÇÅ h‚ÇÇ,
    have e‚ÇÅ: ‚ÜëP = ‚ÜëP * ‚ÜëQ := h‚ÇÅ,
    have e‚ÇÇ: ‚ÜëQ = ‚ÜëQ * ‚ÜëP := h‚ÇÇ,
    have e‚ÇÉ: (‚ÜëP:X ‚ÜíL[ùïú] X) = ‚ÜëQ := by rw [e‚ÇÅ, commute.eq (Lproj_commute P.prop Q.prop), ‚Üê e‚ÇÇ],
    apply subtype.eq e‚ÇÉ,
  end, }

instance : has_zero {P : X ‚ÜíL[ùïú] X // is_Lprojection P}  :=
‚ü®‚ü®0, ‚ü®by rw [is_projection, sq, zero_mul],
     Œª x, by simp only [continuous_linear_map.zero_apply, norm_zero, sub_zero,
                        continuous_linear_map.one_apply, zero_add]‚ü©‚ü©‚ü©

@[simp] lemma coe_zero : ‚Üë(0 : subtype (is_Lprojection  : (X ‚ÜíL[ùïú] X) ‚Üí Prop)) = (0 : X ‚ÜíL[ùïú] X) :=
rfl

instance : has_one {P : X ‚ÜíL[ùïú] X // is_Lprojection P}  :=
‚ü®‚ü®1, begin
  rw ‚Üê sub_zero (1:X ‚ÜíL[ùïú] X),
  apply is_Lprojection.Lcomplement,
  apply (0 : subtype (is_Lprojection  : (X ‚ÜíL[ùïú] X) ‚Üí Prop)).prop,
end‚ü©‚ü©

@[simp] lemma coe_one : ‚Üë(1 : subtype (is_Lprojection  : (X ‚ÜíL[ùïú] X) ‚Üí Prop)) = (1 : X ‚ÜíL[ùïú] X) :=
rfl

instance : bounded_order {P : X ‚ÜíL[ùïú] X // is_Lprojection P} :=
{ top := 1,
  le_top := Œª P,
  begin
    have e: (‚ÜëP:X ‚ÜíL[ùïú] X) = ‚ÜëP *  1 := by rw mul_one,
    apply e,
  end,
  bot := 0,
  bot_le := Œª P, show 0 ‚â§ P, from zero_mul P, }

@[simp] lemma coe_bot : ‚Üë(bounded_order.bot : subtype (is_Lprojection  :
  (X ‚ÜíL[ùïú] X) ‚Üí Prop)) = (0: X ‚ÜíL[ùïú] X) := rfl

@[simp] lemma coe_top : ‚Üë(bounded_order.top : subtype (is_Lprojection  :
  (X ‚ÜíL[ùïú] X) ‚Üí Prop)) = (1: X ‚ÜíL[ùïú] X) := rfl

lemma compl_mul_left {P : subtype (is_Lprojection  : (X ‚ÜíL[ùïú] X) ‚Üí Prop)} {Q: X ‚ÜíL[ùïú] X} :
  Q - ‚ÜëP * Q = ‚ÜëP·∂ú * Q := by rw [coe_compl, sub_mul, one_mul]

lemma compl_orthog {P : subtype (is_Lprojection  : (X ‚ÜíL[ùïú] X) ‚Üí Prop)} :
  (‚ÜëP: X ‚ÜíL[ùïú] X) * (‚Üë P·∂ú) = 0 :=
by rw [coe_compl, mul_sub, ‚Üê sq, mul_one, projection_def P.prop.left, sub_self]

lemma distrib_lattice_lemma {P Q R : subtype (is_Lprojection  : (X ‚ÜíL[ùïú] X) ‚Üí Prop)} :
  ((‚ÜëP:X ‚ÜíL[ùïú] X) + ‚ÜëP·∂ú * R) * (‚ÜëP + ‚ÜëQ * ‚ÜëR * ‚ÜëP·∂ú) = (‚ÜëP + ‚ÜëQ * ‚ÜëR * ‚ÜëP·∂ú) :=
by rw [add_mul, mul_add, mul_add, mul_assoc ‚ÜëP·∂ú ‚ÜëR (‚ÜëQ * ‚ÜëR * ‚ÜëP·∂ú), ‚Üê mul_assoc ‚ÜëR (‚ÜëQ*‚ÜëR)  ‚ÜëP·∂ú,
    ‚Üê coe_inf Q, commute.eq (Lproj_commute P·∂ú.prop R.prop),
    commute.eq (Lproj_commute (Q‚äìR).prop P·∂ú.prop), commute.eq (Lproj_commute R.prop (Q‚äìR).prop),
    coe_inf Q, mul_assoc ‚ÜëQ, ‚Üê mul_assoc, mul_assoc ‚ÜëR, commute.eq (Lproj_commute P·∂ú.prop P.prop),
    compl_orthog, zero_mul, mul_zero, zero_add, add_zero, ‚Üê mul_assoc, ‚Üê sq, ‚Üê sq,
    projection_def P.prop.left, projection_def R.prop.left, ‚Üê coe_inf Q, mul_assoc,
    commute.eq (Lproj_commute (Q‚äìR).prop P·∂ú.prop), ‚Üê mul_assoc, ‚Üê sq, projection_def P·∂ú.prop.left]

instance : distrib_lattice {P : X ‚ÜíL[ùïú] X // is_Lprojection P} :=
{ le_sup_left := Œª P Q,
  begin
    have e: ‚ÜëP = ‚ÜëP * ‚Üë(P ‚äî Q) := by rw [coe_sup, ‚Üê add_sub, mul_add, mul_sub, ‚Üê mul_assoc, ‚Üê sq,
      projection_def P.prop.left, sub_self, add_zero],
    apply e,
  end,
  le_sup_right := Œª P Q,
    begin
    have e: (‚ÜëQ: X ‚ÜíL[ùïú] X) = ‚ÜëQ * ‚Üë(P ‚äî Q) :=
    begin
      rw [coe_sup, ‚Üê add_sub, mul_add, mul_sub, commute.eq (Lproj_commute P.prop Q.prop),
        ‚Üê mul_assoc, ‚Üê sq, projection_def Q.prop.left],
      abel,
    end,
    apply e,
  end,
  sup_le := Œª P Q R,
  begin
    intros h‚ÇÅ h‚ÇÇ,
    have e‚ÇÅ: ‚ÜëP = ‚ÜëP * ‚ÜëR := h‚ÇÅ,
    have e‚ÇÇ: ‚ÜëQ = ‚ÜëQ * ‚ÜëR := h‚ÇÇ,
    have e:  ‚Üë(P ‚äî Q) = ‚Üë(P ‚äî Q) * ‚ÜëR := by rw [coe_sup, ‚Üê add_sub, add_mul, sub_mul, mul_assoc,
       ‚Üê e‚ÇÇ, ‚Üê e‚ÇÅ],
    apply e,
  end,
  inf_le_left := Œª P Q,
  begin
    have e: ‚Üë(P ‚äì Q) = ‚Üë(P ‚äì Q) * ‚ÜëP := by rw [coe_inf, mul_assoc,
      commute.eq (Lproj_commute Q.prop P.prop), ‚Üê mul_assoc, ‚Üê sq, (projection_def P.prop.left)],
    apply e,
  end,
  inf_le_right := Œª P Q,
  begin
    have e: ‚Üë(P ‚äì Q) = ‚Üë(P ‚äì Q) * ‚ÜëQ := by
      rw [coe_inf, mul_assoc,  ‚Üê sq, (projection_def Q.prop.left)],
    apply e,
  end,
  le_inf := Œª P Q R,
  begin
    intros h‚ÇÅ h‚ÇÇ,
    have e‚ÇÅ: ‚ÜëP = ‚ÜëP * ‚ÜëQ := h‚ÇÅ,
    have e: ‚ÜëP =  ‚ÜëP * ‚Üë(Q ‚äì R) := begin
      rw [coe_inf, ‚Üê mul_assoc, ‚Üê e‚ÇÅ],
      apply h‚ÇÇ,
    end,
    apply e,
  end,
  le_sup_inf := Œª P Q R,
  begin
    have e‚ÇÅ: ‚Üë((P ‚äî Q) ‚äì (P ‚äî R)) = ‚ÜëP + ‚ÜëQ * ‚ÜëR * ‚ÜëP·∂ú := by rw [coe_inf, coe_sup, coe_sup,
      ‚Üê add_sub, ‚Üê add_sub, compl_mul_left, compl_mul_left, add_mul,
      mul_add, commute.eq (Lproj_commute P·∂ú.prop Q.prop), mul_add, ‚Üê mul_assoc, mul_assoc ‚ÜëQ,
      commute.eq (Lproj_commute P·∂ú.prop P.prop), compl_orthog, zero_mul, mul_zero, zero_add,
      add_zero, ‚Üê mul_assoc, mul_assoc ‚ÜëQ, ‚Üêsq, ‚Üê sq, projection_def P.prop.left,
      projection_def P·∂ú.prop.left, mul_assoc, commute.eq (Lproj_commute P·∂ú.prop R.prop),
      ‚Üê mul_assoc],
    have e‚ÇÇ : ‚Üë((P ‚äî Q) ‚äì (P ‚äî R)) * ‚Üë(P ‚äî Q ‚äì R) = ‚ÜëP + ‚ÜëQ * ‚ÜëR * ‚ÜëP·∂ú := by rw [coe_inf, coe_sup,
      coe_sup, coe_sup, ‚Üê add_sub, ‚Üê add_sub, ‚Üê add_sub, compl_mul_left, compl_mul_left,
      compl_mul_left, commute.eq (Lproj_commute P·∂ú.prop (Q‚äìR).prop), coe_inf, mul_assoc,
      distrib_lattice_lemma, commute.eq (Lproj_commute Q.prop R.prop), distrib_lattice_lemma],
    have e: ‚Üë((P ‚äî Q) ‚äì (P ‚äî R)) = ‚Üë((P ‚äî Q) ‚äì (P ‚äî R)) * ‚Üë(P ‚äî Q ‚äì R) := by rw [e‚ÇÇ, e‚ÇÅ],
    apply e,
  end,
  .. is_Lprojection.subtype.has_inf,
  .. is_Lprojection.subtype.has_sup,
  .. is_Lprojection.subtype.partial_order }

instance : boolean_algebra {P : X ‚ÜíL[ùïú] X // is_Lprojection P} :=
{ sup_inf_sdiff := Œª P Q,
  begin
    apply subtype.eq,
    simp only [subtype.val_eq_coe, coe_sup, coe_inf, coe_sdiff],
    rw [mul_assoc, ‚Üê mul_assoc ‚ÜëQ, commute.eq (Lproj_commute Q.prop P.prop), mul_assoc ‚ÜëP ‚ÜëQ,
      ‚Üê coe_compl, compl_orthog, mul_zero, mul_zero, sub_zero, ‚Üê mul_add, coe_compl,
      add_sub_cancel'_right, mul_one],
  end,
  inf_inf_sdiff := Œª P Q,
  begin
    apply subtype.eq,
    simp only [subtype.val_eq_coe, coe_inf, coe_sdiff, coe_bot],
    rw [mul_assoc, ‚Üê mul_assoc ‚ÜëQ, commute.eq (Lproj_commute Q.prop P.prop), ‚Üê coe_compl, mul_assoc,
      compl_orthog, mul_zero, mul_zero],
  end,
  inf_compl_le_bot := Œª P,
  begin
    apply eq.le,
    apply subtype.eq,
    simp only [subtype.val_eq_coe, coe_inf, coe_compl, coe_bot],
    rw [‚Üê coe_compl, compl_orthog],
  end,
  top_le_sup_compl := Œª P,
  begin
    apply eq.le,
    apply subtype.eq,
    simp only [subtype.val_eq_coe, coe_top, coe_sup, coe_compl, add_sub_cancel'_right],
    rw [‚Üê coe_compl, compl_orthog, sub_zero],
  end,
  sdiff_eq := Œª P Q,
  begin
    apply subtype.eq,
    simp only [subtype.val_eq_coe, coe_inf, coe_sdiff, coe_compl],
  end,
  .. is_Lprojection.subtype.has_compl,
  .. is_Lprojection.subtype.has_sdiff,
  .. is_Lprojection.subtype.bounded_order,
  .. is_Lprojection.subtype.distrib_lattice }

end is_Lprojection
